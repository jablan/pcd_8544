defmodule Pcd8544 do
  @moduledoc """
  Documentation for Pcd8544.
  """

  use Bitwise

  alias Circuits.SPI
  alias Circuits.GPIO

  @dc_pin 23
  @rst_pin 24
  @spi_bus 0 # SPI bus
  @spi_dev 0 # SPI slave device

  @commands [
    powerdown: 0x04,
    entrymode: 0x02,
    display_blank: 0x08,
    display_normal: 0x0c,
    display_all_on: 0x09,
    display_inverted: 0x0d,
    function_set_basic: 0x20,
    function_set_extended: 0x21,
    displaycontrol: 0x08,
    set_y_addr: 0x40,
    set_x_addr: 0x80,
    set_temp: 0x04,
    set_bias: 0x14,
    set_contrast: 0x80 ||| 0x40,
    set_vop: 0x80,
  ]

  @unknown_char << 0x02, 0x01, 0x51, 0x09, 0x06 >>

  @charset %{
    " " => << 0x00, 0x00, 0x00, 0x00, 0x00 >>,
    "!" => << 0x00, 0x00, 0x5f, 0x00, 0x00 >>,
    "\"" => << 0x00, 0x07, 0x00, 0x07, 0x00 >>,
    "#" => << 0x14, 0x7f, 0x14, 0x7f, 0x14 >>,
    "$" => << 0x24, 0x2a, 0x7f, 0x2a, 0x12 >>,
    "%" => << 0x23, 0x13, 0x08, 0x64, 0x62 >>,
    "&" => << 0x36, 0x49, 0x55, 0x22, 0x50 >>,
    "'" => << 0x00, 0x05, 0x03, 0x00, 0x00 >>,
    "(" => << 0x00, 0x1c, 0x22, 0x41, 0x00 >>,
    ")" => << 0x00, 0x41, 0x22, 0x1c, 0x00 >>,
    "*" => << 0x14, 0x08, 0x3e, 0x08, 0x14 >>,
    "+" => << 0x08, 0x08, 0x3e, 0x08, 0x08 >>,
    "," => << 0x00, 0x50, 0x30, 0x00, 0x00 >>,
    "-" => << 0x08, 0x08, 0x08, 0x08, 0x08 >>,
    "." => << 0x00, 0x60, 0x60, 0x00, 0x00 >>,
    "/" => << 0x20, 0x10, 0x08, 0x04, 0x02 >>,
    "0" => << 0x3e, 0x51, 0x49, 0x45, 0x3e >>,
    "1" => << 0x00, 0x42, 0x7f, 0x40, 0x00 >>,
    "2" => << 0x42, 0x61, 0x51, 0x49, 0x46 >>,
    "3" => << 0x21, 0x41, 0x45, 0x4b, 0x31 >>,
    "4" => << 0x18, 0x14, 0x12, 0x7f, 0x10 >>,
    "5" => << 0x27, 0x45, 0x45, 0x45, 0x39 >>,
    "6" => << 0x3c, 0x4a, 0x49, 0x49, 0x30 >>,
    "7" => << 0x01, 0x71, 0x09, 0x05, 0x03 >>,
    "8" => << 0x36, 0x49, 0x49, 0x49, 0x36 >>,
    "9" => << 0x06, 0x49, 0x49, 0x29, 0x1e >>,
    ":" => << 0x00, 0x36, 0x36, 0x00, 0x00 >>,
    ";" => << 0x00, 0x56, 0x36, 0x00, 0x00 >>,
    "<" => << 0x08, 0x14, 0x22, 0x41, 0x00 >>,
    "=" => << 0x14, 0x14, 0x14, 0x14, 0x14 >>,
    ">" => << 0x00, 0x41, 0x22, 0x14, 0x08 >>,
    "?" => << 0x02, 0x01, 0x51, 0x09, 0x06 >>,
    "@" => << 0x32, 0x49, 0x79, 0x41, 0x3e >>,
    "A" => << 0x7e, 0x11, 0x11, 0x11, 0x7e >>,
    "B" => << 0x7f, 0x49, 0x49, 0x49, 0x36 >>,
    "C" => << 0x3e, 0x41, 0x41, 0x41, 0x22 >>,
    "D" => << 0x7f, 0x41, 0x41, 0x22, 0x1c >>,
    "E" => << 0x7f, 0x49, 0x49, 0x49, 0x41 >>,
    "F" => << 0x7f, 0x09, 0x09, 0x09, 0x01 >>,
    "G" => << 0x3e, 0x41, 0x49, 0x49, 0x7a >>,
    "H" => << 0x7f, 0x08, 0x08, 0x08, 0x7f >>,
    "I" => << 0x00, 0x41, 0x7f, 0x41, 0x00 >>,
    "J" => << 0x20, 0x40, 0x41, 0x3f, 0x01 >>,
    "K" => << 0x7f, 0x08, 0x14, 0x22, 0x41 >>,
    "L" => << 0x7f, 0x40, 0x40, 0x40, 0x40 >>,
    "M" => << 0x7f, 0x02, 0x0c, 0x02, 0x7f >>,
    "N" => << 0x7f, 0x04, 0x08, 0x10, 0x7f >>,
    "O" => << 0x3e, 0x41, 0x41, 0x41, 0x3e >>,
    "P" => << 0x7f, 0x09, 0x09, 0x09, 0x06 >>,
    "Q" => << 0x3e, 0x41, 0x51, 0x21, 0x5e >>,
    "R" => << 0x7f, 0x09, 0x19, 0x29, 0x46 >>,
    "S" => << 0x46, 0x49, 0x49, 0x49, 0x31 >>,
    "T" => << 0x01, 0x01, 0x7f, 0x01, 0x01 >>,
    "U" => << 0x3f, 0x40, 0x40, 0x40, 0x3f >>,
    "V" => << 0x1f, 0x20, 0x40, 0x20, 0x1f >>,
    "W" => << 0x3f, 0x40, 0x38, 0x40, 0x3f >>,
    "X" => << 0x63, 0x14, 0x08, 0x14, 0x63 >>,
    "Y" => << 0x07, 0x08, 0x70, 0x08, 0x07 >>,
    "Z" => << 0x61, 0x51, 0x49, 0x45, 0x43 >>,
    "[" => << 0x00, 0x7f, 0x41, 0x41, 0x00 >>,
    "]" => << 0x00, 0x41, 0x41, 0x7f, 0x00 >>,
    "^" => << 0x04, 0x02, 0x01, 0x02, 0x04 >>,
    "_" => << 0x40, 0x40, 0x40, 0x40, 0x40 >>,
    "`" => << 0x00, 0x01, 0x02, 0x04, 0x00 >>,
    "a" => << 0x20, 0x54, 0x54, 0x54, 0x78 >>,
    "b" => << 0x7f, 0x48, 0x44, 0x44, 0x38 >>,
    "c" => << 0x38, 0x44, 0x44, 0x44, 0x20 >>,
    "d" => << 0x38, 0x44, 0x44, 0x48, 0x7f >>,
    "e" => << 0x38, 0x54, 0x54, 0x54, 0x18 >>,
    "f" => << 0x08, 0x7e, 0x09, 0x01, 0x02 >>,
    "g" => << 0x0c, 0x52, 0x52, 0x52, 0x3e >>,
    "h" => << 0x7f, 0x08, 0x04, 0x04, 0x78 >>,
    "i" => << 0x00, 0x44, 0x7d, 0x40, 0x00 >>,
    "j" => << 0x20, 0x40, 0x44, 0x3d, 0x00 >>,
    "k" => << 0x7f, 0x10, 0x28, 0x44, 0x00 >>,
    "l" => << 0x00, 0x41, 0x7f, 0x40, 0x00 >>,
    "m" => << 0x7c, 0x04, 0x18, 0x04, 0x78 >>,
    "n" => << 0x7c, 0x08, 0x04, 0x04, 0x78 >>,
    "o" => << 0x38, 0x44, 0x44, 0x44, 0x38 >>,
    "p" => << 0x7c, 0x14, 0x14, 0x14, 0x08 >>,
    "q" => << 0x08, 0x14, 0x14, 0x18, 0x7c >>,
    "r" => << 0x7c, 0x08, 0x04, 0x04, 0x08 >>,
    "s" => << 0x48, 0x54, 0x54, 0x54, 0x20 >>,
    "t" => << 0x04, 0x3f, 0x44, 0x40, 0x20 >>,
    "u" => << 0x3c, 0x40, 0x40, 0x20, 0x7c >>,
    "v" => << 0x1c, 0x20, 0x40, 0x20, 0x1c >>,
    "w" => << 0x3c, 0x40, 0x30, 0x40, 0x3c >>,
    "x" => << 0x44, 0x28, 0x10, 0x28, 0x44 >>,
    "y" => << 0x0c, 0x50, 0x50, 0x50, 0x3c >>,
    "z" => << 0x44, 0x64, 0x54, 0x4c, 0x44 >>,
    "{" => << 0x00, 0x08, 0x36, 0x41, 0x00 >>,
    "|" => << 0x00, 0x00, 0x7f, 0x00, 0x00 >>,
    "}" => << 0x00, 0x41, 0x36, 0x08, 0x00 >>,
    "~" => << 0x10, 0x08, 0x08, 0x10, 0x08 >>,
  }

  def handle_call(:clear, _from, state) do
    output_buffer(state, String.duplicate("\0", 84 * 6))
    {:reply, :ok, state}
  end

  def handle_call({:write, str}, _from, %{spi: spi, dc: dc} = state) do
    :ok = GPIO.write(dc, 1)
    str
    |> String.codepoints
    |> Enum.each(fn(c) ->
      SPI.transfer(spi, Map.get(@charset, c, @unknown_char) <> "\0" )
    end)
    {:reply, :ok, state}
  end

  def handle_call({:cursorpos, {x, y}}, _from, state) do
    state
    |> command(@commands[:set_y_addr] ||| y)
    |> command(@commands[:set_x_addr] ||| (x * 6))
    {:reply, :ok, state}
  end

  def init(opts \\ []) do
    spi_bus = Keyword.get(opts, :spi_bus, @spi_bus)
    spi_dev = Keyword.get(opts, :spi_dev, @spi_dev)
    {:ok, spi} = SPI.open("spidev#{spi_bus}.#{spi_dev}")
    {:ok, dc} = GPIO.open(Keyword.get(opts, :dc_pin, @dc_pin), :output)
    {:ok, rst} = GPIO.open(Keyword.get(opts, :rst_pin, @rst_pin), :output)
    state = %{spi: spi, dc: dc, rst: rst}
    reset(state)
    {:ok, state}
  end

  def clear() do
    GenServer.call(__MODULE__, :clear)
  end

  def write(str) do
    GenServer.call(__MODULE__, {:write, str})
  end

  def cursorpos(x, y) do
    GenServer.call(__MODULE__, {:cursorpos, {x, y}})
  end

  def command(%{spi: spi, dc: dc} = state, c) do
    :ok = GPIO.write(dc, 0)
    {:ok, _resp} = SPI.transfer(spi, <<c>>)
    state
  end

  def output_buffer(%{spi: spi, dc: dc} = state, buffer) do
    state
    |> command(@commands[:set_y_addr])
    |> command(@commands[:set_x_addr])
    :ok = GPIO.write(dc, 1)
    {:ok, _resp} = SPI.transfer(spi, buffer)
    state
  end

  def reset(%{rst: rst} = state) do
    :ok = GPIO.write(rst, 0)
    Process.sleep(100)
    :ok = GPIO.write(rst, 1)
    state
    |> command(@commands[:function_set_extended])
    |> command(@commands[:set_bias])
    |> command(@commands[:set_contrast])
    |> command(@commands[:function_set_basic])
    |> command(@commands[:display_normal])
    state
  end
end
